
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model user
 * 
 */
export type user = {
  id: number
  email: string
  fullName: string
  userRole: number
  phoneNo: string
  userName: string
  createdDate: Date
  updatedDate: Date
  password: string
  isActive: boolean
}

/**
 * Model userRole
 * 
 */
export type userRole = {
  id: number
  name: string
}

/**
 * Model service
 * 
 */
export type service = {
  id: number
  name: string
  fee: Prisma.Decimal
}

/**
 * Model duration_status
 * 
 */
export type duration_status = {
  id: number
  name: string
}

/**
 * Model customer
 * 
 */
export type customer = {
  id: number
  name: string
  phoneNo: string
  email: string
  createdDate: Date
  updatedDate: Date
  address: string
  nrc: string
}

/**
 * Model booking
 * 
 */
export type booking = {
  id: number
  customerId: number
  carNo: string
  note: string
  createdDate: Date
  updatedDate: Date
  durationDay: number
  durationType: number
  status: number
  service: string
}

/**
 * Model booking_status
 * 
 */
export type booking_status = {
  id: number
  name: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **userRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.userRoleDelegate<GlobalReject>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.serviceDelegate<GlobalReject>;

  /**
   * `prisma.duration_status`: Exposes CRUD operations for the **duration_status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Duration_statuses
    * const duration_statuses = await prisma.duration_status.findMany()
    * ```
    */
  get duration_status(): Prisma.duration_statusDelegate<GlobalReject>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.customerDelegate<GlobalReject>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.bookingDelegate<GlobalReject>;

  /**
   * `prisma.booking_status`: Exposes CRUD operations for the **booking_status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Booking_statuses
    * const booking_statuses = await prisma.booking_status.findMany()
    * ```
    */
  get booking_status(): Prisma.booking_statusDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    user: 'user',
    userRole: 'userRole',
    service: 'service',
    duration_status: 'duration_status',
    customer: 'customer',
    booking: 'booking',
    booking_status: 'booking_status'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    userRole: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    userRole: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    fullName: string | null
    userRole: number | null
    phoneNo: string | null
    userName: string | null
    createdDate: Date | null
    updatedDate: Date | null
    password: string | null
    isActive: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    fullName: string | null
    userRole: number | null
    phoneNo: string | null
    userName: string | null
    createdDate: Date | null
    updatedDate: Date | null
    password: string | null
    isActive: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    fullName: number
    userRole: number
    phoneNo: number
    userName: number
    createdDate: number
    updatedDate: number
    password: number
    isActive: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    userRole?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    userRole?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    userRole?: true
    phoneNo?: true
    userName?: true
    createdDate?: true
    updatedDate?: true
    password?: true
    isActive?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    userRole?: true
    phoneNo?: true
    userName?: true
    createdDate?: true
    updatedDate?: true
    password?: true
    isActive?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    userRole?: true
    phoneNo?: true
    userName?: true
    createdDate?: true
    updatedDate?: true
    password?: true
    isActive?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    fullName: string
    userRole: number
    phoneNo: string
    userName: string
    createdDate: Date
    updatedDate: Date
    password: string
    isActive: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    id?: boolean
    email?: boolean
    fullName?: boolean
    userRole?: boolean
    phoneNo?: boolean
    userName?: boolean
    createdDate?: boolean
    updatedDate?: boolean
    password?: boolean
    isActive?: boolean
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof user ? user[P] : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Throw an Error if a user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Throw an Error if a user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * The data needed to create a user.
     * 
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * The data needed to update a user.
     * 
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * The filter to search for the user to update in case it exists.
     * 
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     * 
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Filter which user to delete.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
  }



  /**
   * Model userRole
   */


  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleAvgAggregateOutputType = {
    id: number | null
  }

  export type UserRoleSumAggregateOutputType = {
    id: number | null
  }

  export type UserRoleMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type UserRoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type UserRoleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type UserRoleAvgAggregateInputType = {
    id?: true
  }

  export type UserRoleSumAggregateInputType = {
    id?: true
  }

  export type UserRoleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type UserRoleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type UserRoleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type UserRoleAggregateArgs = {
    /**
     * Filter which userRole to aggregate.
     * 
    **/
    where?: userRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userRoles to fetch.
     * 
    **/
    orderBy?: Enumerable<userRoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: userRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userRoles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userRoles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs = {
    where?: userRoleWhereInput
    orderBy?: Enumerable<userRoleOrderByWithAggregationInput>
    by: Array<UserRoleScalarFieldEnum>
    having?: userRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _avg?: UserRoleAvgAggregateInputType
    _sum?: UserRoleSumAggregateInputType
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }


  export type UserRoleGroupByOutputType = {
    id: number
    name: string
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type userRoleSelect = {
    id?: boolean
    name?: boolean
  }

  export type userRoleGetPayload<
    S extends boolean | null | undefined | userRoleArgs,
    U = keyof S
      > = S extends true
        ? userRole
    : S extends undefined
    ? never
    : S extends userRoleArgs | userRoleFindManyArgs
    ?'include' extends U
    ? userRole 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof userRole ? userRole[P] : never
  } 
    : userRole
  : userRole


  type userRoleCountArgs = Merge<
    Omit<userRoleFindManyArgs, 'select' | 'include'> & {
      select?: UserRoleCountAggregateInputType | true
    }
  >

  export interface userRoleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {userRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userRoleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userRoleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'userRole'> extends True ? CheckSelect<T, Prisma__userRoleClient<userRole>, Prisma__userRoleClient<userRoleGetPayload<T>>> : CheckSelect<T, Prisma__userRoleClient<userRole | null >, Prisma__userRoleClient<userRoleGetPayload<T> | null >>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userRoleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userRoleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'userRole'> extends True ? CheckSelect<T, Prisma__userRoleClient<userRole>, Prisma__userRoleClient<userRoleGetPayload<T>>> : CheckSelect<T, Prisma__userRoleClient<userRole | null >, Prisma__userRoleClient<userRoleGetPayload<T> | null >>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRoleWithIdOnly = await prisma.userRole.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userRoleFindManyArgs>(
      args?: SelectSubset<T, userRoleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<userRole>>, PrismaPromise<Array<userRoleGetPayload<T>>>>

    /**
     * Create a UserRole.
     * @param {userRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
    **/
    create<T extends userRoleCreateArgs>(
      args: SelectSubset<T, userRoleCreateArgs>
    ): CheckSelect<T, Prisma__userRoleClient<userRole>, Prisma__userRoleClient<userRoleGetPayload<T>>>

    /**
     * Create many UserRoles.
     *     @param {userRoleCreateManyArgs} args - Arguments to create many UserRoles.
     *     @example
     *     // Create many UserRoles
     *     const userRole = await prisma.userRole.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userRoleCreateManyArgs>(
      args?: SelectSubset<T, userRoleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserRole.
     * @param {userRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
    **/
    delete<T extends userRoleDeleteArgs>(
      args: SelectSubset<T, userRoleDeleteArgs>
    ): CheckSelect<T, Prisma__userRoleClient<userRole>, Prisma__userRoleClient<userRoleGetPayload<T>>>

    /**
     * Update one UserRole.
     * @param {userRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userRoleUpdateArgs>(
      args: SelectSubset<T, userRoleUpdateArgs>
    ): CheckSelect<T, Prisma__userRoleClient<userRole>, Prisma__userRoleClient<userRoleGetPayload<T>>>

    /**
     * Delete zero or more UserRoles.
     * @param {userRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userRoleDeleteManyArgs>(
      args?: SelectSubset<T, userRoleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userRoleUpdateManyArgs>(
      args: SelectSubset<T, userRoleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRole.
     * @param {userRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
    **/
    upsert<T extends userRoleUpsertArgs>(
      args: SelectSubset<T, userRoleUpsertArgs>
    ): CheckSelect<T, Prisma__userRoleClient<userRole>, Prisma__userRoleClient<userRoleGetPayload<T>>>

    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends userRoleCountArgs>(
      args?: Subset<T, userRoleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for userRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userRoleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * userRole findUnique
   */
  export type userRoleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the userRole
     * 
    **/
    select?: userRoleSelect | null
    /**
     * Throw an Error if a userRole can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which userRole to fetch.
     * 
    **/
    where: userRoleWhereUniqueInput
  }


  /**
   * userRole findFirst
   */
  export type userRoleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the userRole
     * 
    **/
    select?: userRoleSelect | null
    /**
     * Throw an Error if a userRole can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which userRole to fetch.
     * 
    **/
    where?: userRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userRoles to fetch.
     * 
    **/
    orderBy?: Enumerable<userRoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userRoles.
     * 
    **/
    cursor?: userRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userRoles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userRoles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userRoles.
     * 
    **/
    distinct?: Enumerable<UserRoleScalarFieldEnum>
  }


  /**
   * userRole findMany
   */
  export type userRoleFindManyArgs = {
    /**
     * Select specific fields to fetch from the userRole
     * 
    **/
    select?: userRoleSelect | null
    /**
     * Filter, which userRoles to fetch.
     * 
    **/
    where?: userRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userRoles to fetch.
     * 
    **/
    orderBy?: Enumerable<userRoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userRoles.
     * 
    **/
    cursor?: userRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userRoles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userRoles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserRoleScalarFieldEnum>
  }


  /**
   * userRole create
   */
  export type userRoleCreateArgs = {
    /**
     * Select specific fields to fetch from the userRole
     * 
    **/
    select?: userRoleSelect | null
    /**
     * The data needed to create a userRole.
     * 
    **/
    data: XOR<userRoleCreateInput, userRoleUncheckedCreateInput>
  }


  /**
   * userRole createMany
   */
  export type userRoleCreateManyArgs = {
    /**
     * The data used to create many userRoles.
     * 
    **/
    data: Enumerable<userRoleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * userRole update
   */
  export type userRoleUpdateArgs = {
    /**
     * Select specific fields to fetch from the userRole
     * 
    **/
    select?: userRoleSelect | null
    /**
     * The data needed to update a userRole.
     * 
    **/
    data: XOR<userRoleUpdateInput, userRoleUncheckedUpdateInput>
    /**
     * Choose, which userRole to update.
     * 
    **/
    where: userRoleWhereUniqueInput
  }


  /**
   * userRole updateMany
   */
  export type userRoleUpdateManyArgs = {
    /**
     * The data used to update userRoles.
     * 
    **/
    data: XOR<userRoleUpdateManyMutationInput, userRoleUncheckedUpdateManyInput>
    /**
     * Filter which userRoles to update
     * 
    **/
    where?: userRoleWhereInput
  }


  /**
   * userRole upsert
   */
  export type userRoleUpsertArgs = {
    /**
     * Select specific fields to fetch from the userRole
     * 
    **/
    select?: userRoleSelect | null
    /**
     * The filter to search for the userRole to update in case it exists.
     * 
    **/
    where: userRoleWhereUniqueInput
    /**
     * In case the userRole found by the `where` argument doesn't exist, create a new userRole with this data.
     * 
    **/
    create: XOR<userRoleCreateInput, userRoleUncheckedCreateInput>
    /**
     * In case the userRole was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<userRoleUpdateInput, userRoleUncheckedUpdateInput>
  }


  /**
   * userRole delete
   */
  export type userRoleDeleteArgs = {
    /**
     * Select specific fields to fetch from the userRole
     * 
    **/
    select?: userRoleSelect | null
    /**
     * Filter which userRole to delete.
     * 
    **/
    where: userRoleWhereUniqueInput
  }


  /**
   * userRole deleteMany
   */
  export type userRoleDeleteManyArgs = {
    /**
     * Filter which userRoles to delete
     * 
    **/
    where?: userRoleWhereInput
  }


  /**
   * userRole without action
   */
  export type userRoleArgs = {
    /**
     * Select specific fields to fetch from the userRole
     * 
    **/
    select?: userRoleSelect | null
  }



  /**
   * Model service
   */


  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    id: number | null
    fee: Decimal | null
  }

  export type ServiceSumAggregateOutputType = {
    id: number | null
    fee: Decimal | null
  }

  export type ServiceMinAggregateOutputType = {
    id: number | null
    name: string | null
    fee: Decimal | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    fee: Decimal | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    name: number
    fee: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    id?: true
    fee?: true
  }

  export type ServiceSumAggregateInputType = {
    id?: true
    fee?: true
  }

  export type ServiceMinAggregateInputType = {
    id?: true
    name?: true
    fee?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    name?: true
    fee?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    name?: true
    fee?: true
    _all?: true
  }

  export type ServiceAggregateArgs = {
    /**
     * Filter which service to aggregate.
     * 
    **/
    where?: serviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     * 
    **/
    orderBy?: Enumerable<serviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: serviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs = {
    where?: serviceWhereInput
    orderBy?: Enumerable<serviceOrderByWithAggregationInput>
    by: Array<ServiceScalarFieldEnum>
    having?: serviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }


  export type ServiceGroupByOutputType = {
    id: number
    name: string
    fee: Decimal
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type serviceSelect = {
    id?: boolean
    name?: boolean
    fee?: boolean
  }

  export type serviceGetPayload<
    S extends boolean | null | undefined | serviceArgs,
    U = keyof S
      > = S extends true
        ? service
    : S extends undefined
    ? never
    : S extends serviceArgs | serviceFindManyArgs
    ?'include' extends U
    ? service 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof service ? service[P] : never
  } 
    : service
  : service


  type serviceCountArgs = Merge<
    Omit<serviceFindManyArgs, 'select' | 'include'> & {
      select?: ServiceCountAggregateInputType | true
    }
  >

  export interface serviceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Service that matches the filter.
     * @param {serviceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends serviceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, serviceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'service'> extends True ? CheckSelect<T, Prisma__serviceClient<service>, Prisma__serviceClient<serviceGetPayload<T>>> : CheckSelect<T, Prisma__serviceClient<service | null >, Prisma__serviceClient<serviceGetPayload<T> | null >>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends serviceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, serviceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'service'> extends True ? CheckSelect<T, Prisma__serviceClient<service>, Prisma__serviceClient<serviceGetPayload<T>>> : CheckSelect<T, Prisma__serviceClient<service | null >, Prisma__serviceClient<serviceGetPayload<T> | null >>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends serviceFindManyArgs>(
      args?: SelectSubset<T, serviceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<service>>, PrismaPromise<Array<serviceGetPayload<T>>>>

    /**
     * Create a Service.
     * @param {serviceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
    **/
    create<T extends serviceCreateArgs>(
      args: SelectSubset<T, serviceCreateArgs>
    ): CheckSelect<T, Prisma__serviceClient<service>, Prisma__serviceClient<serviceGetPayload<T>>>

    /**
     * Create many Services.
     *     @param {serviceCreateManyArgs} args - Arguments to create many Services.
     *     @example
     *     // Create many Services
     *     const service = await prisma.service.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends serviceCreateManyArgs>(
      args?: SelectSubset<T, serviceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Service.
     * @param {serviceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
    **/
    delete<T extends serviceDeleteArgs>(
      args: SelectSubset<T, serviceDeleteArgs>
    ): CheckSelect<T, Prisma__serviceClient<service>, Prisma__serviceClient<serviceGetPayload<T>>>

    /**
     * Update one Service.
     * @param {serviceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends serviceUpdateArgs>(
      args: SelectSubset<T, serviceUpdateArgs>
    ): CheckSelect<T, Prisma__serviceClient<service>, Prisma__serviceClient<serviceGetPayload<T>>>

    /**
     * Delete zero or more Services.
     * @param {serviceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends serviceDeleteManyArgs>(
      args?: SelectSubset<T, serviceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends serviceUpdateManyArgs>(
      args: SelectSubset<T, serviceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Service.
     * @param {serviceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
    **/
    upsert<T extends serviceUpsertArgs>(
      args: SelectSubset<T, serviceUpsertArgs>
    ): CheckSelect<T, Prisma__serviceClient<service>, Prisma__serviceClient<serviceGetPayload<T>>>

    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends serviceCountArgs>(
      args?: Subset<T, serviceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__serviceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * service findUnique
   */
  export type serviceFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the service
     * 
    **/
    select?: serviceSelect | null
    /**
     * Throw an Error if a service can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which service to fetch.
     * 
    **/
    where: serviceWhereUniqueInput
  }


  /**
   * service findFirst
   */
  export type serviceFindFirstArgs = {
    /**
     * Select specific fields to fetch from the service
     * 
    **/
    select?: serviceSelect | null
    /**
     * Throw an Error if a service can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which service to fetch.
     * 
    **/
    where?: serviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     * 
    **/
    orderBy?: Enumerable<serviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for services.
     * 
    **/
    cursor?: serviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of services.
     * 
    **/
    distinct?: Enumerable<ServiceScalarFieldEnum>
  }


  /**
   * service findMany
   */
  export type serviceFindManyArgs = {
    /**
     * Select specific fields to fetch from the service
     * 
    **/
    select?: serviceSelect | null
    /**
     * Filter, which services to fetch.
     * 
    **/
    where?: serviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     * 
    **/
    orderBy?: Enumerable<serviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing services.
     * 
    **/
    cursor?: serviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ServiceScalarFieldEnum>
  }


  /**
   * service create
   */
  export type serviceCreateArgs = {
    /**
     * Select specific fields to fetch from the service
     * 
    **/
    select?: serviceSelect | null
    /**
     * The data needed to create a service.
     * 
    **/
    data: XOR<serviceCreateInput, serviceUncheckedCreateInput>
  }


  /**
   * service createMany
   */
  export type serviceCreateManyArgs = {
    /**
     * The data used to create many services.
     * 
    **/
    data: Enumerable<serviceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * service update
   */
  export type serviceUpdateArgs = {
    /**
     * Select specific fields to fetch from the service
     * 
    **/
    select?: serviceSelect | null
    /**
     * The data needed to update a service.
     * 
    **/
    data: XOR<serviceUpdateInput, serviceUncheckedUpdateInput>
    /**
     * Choose, which service to update.
     * 
    **/
    where: serviceWhereUniqueInput
  }


  /**
   * service updateMany
   */
  export type serviceUpdateManyArgs = {
    /**
     * The data used to update services.
     * 
    **/
    data: XOR<serviceUpdateManyMutationInput, serviceUncheckedUpdateManyInput>
    /**
     * Filter which services to update
     * 
    **/
    where?: serviceWhereInput
  }


  /**
   * service upsert
   */
  export type serviceUpsertArgs = {
    /**
     * Select specific fields to fetch from the service
     * 
    **/
    select?: serviceSelect | null
    /**
     * The filter to search for the service to update in case it exists.
     * 
    **/
    where: serviceWhereUniqueInput
    /**
     * In case the service found by the `where` argument doesn't exist, create a new service with this data.
     * 
    **/
    create: XOR<serviceCreateInput, serviceUncheckedCreateInput>
    /**
     * In case the service was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<serviceUpdateInput, serviceUncheckedUpdateInput>
  }


  /**
   * service delete
   */
  export type serviceDeleteArgs = {
    /**
     * Select specific fields to fetch from the service
     * 
    **/
    select?: serviceSelect | null
    /**
     * Filter which service to delete.
     * 
    **/
    where: serviceWhereUniqueInput
  }


  /**
   * service deleteMany
   */
  export type serviceDeleteManyArgs = {
    /**
     * Filter which services to delete
     * 
    **/
    where?: serviceWhereInput
  }


  /**
   * service without action
   */
  export type serviceArgs = {
    /**
     * Select specific fields to fetch from the service
     * 
    **/
    select?: serviceSelect | null
  }



  /**
   * Model duration_status
   */


  export type AggregateDuration_status = {
    _count: Duration_statusCountAggregateOutputType | null
    _avg: Duration_statusAvgAggregateOutputType | null
    _sum: Duration_statusSumAggregateOutputType | null
    _min: Duration_statusMinAggregateOutputType | null
    _max: Duration_statusMaxAggregateOutputType | null
  }

  export type Duration_statusAvgAggregateOutputType = {
    id: number | null
  }

  export type Duration_statusSumAggregateOutputType = {
    id: number | null
  }

  export type Duration_statusMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type Duration_statusMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type Duration_statusCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type Duration_statusAvgAggregateInputType = {
    id?: true
  }

  export type Duration_statusSumAggregateInputType = {
    id?: true
  }

  export type Duration_statusMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type Duration_statusMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type Duration_statusCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type Duration_statusAggregateArgs = {
    /**
     * Filter which duration_status to aggregate.
     * 
    **/
    where?: duration_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of duration_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<duration_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: duration_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` duration_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` duration_statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned duration_statuses
    **/
    _count?: true | Duration_statusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Duration_statusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Duration_statusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Duration_statusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Duration_statusMaxAggregateInputType
  }

  export type GetDuration_statusAggregateType<T extends Duration_statusAggregateArgs> = {
        [P in keyof T & keyof AggregateDuration_status]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDuration_status[P]>
      : GetScalarType<T[P], AggregateDuration_status[P]>
  }




  export type Duration_statusGroupByArgs = {
    where?: duration_statusWhereInput
    orderBy?: Enumerable<duration_statusOrderByWithAggregationInput>
    by: Array<Duration_statusScalarFieldEnum>
    having?: duration_statusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Duration_statusCountAggregateInputType | true
    _avg?: Duration_statusAvgAggregateInputType
    _sum?: Duration_statusSumAggregateInputType
    _min?: Duration_statusMinAggregateInputType
    _max?: Duration_statusMaxAggregateInputType
  }


  export type Duration_statusGroupByOutputType = {
    id: number
    name: string
    _count: Duration_statusCountAggregateOutputType | null
    _avg: Duration_statusAvgAggregateOutputType | null
    _sum: Duration_statusSumAggregateOutputType | null
    _min: Duration_statusMinAggregateOutputType | null
    _max: Duration_statusMaxAggregateOutputType | null
  }

  type GetDuration_statusGroupByPayload<T extends Duration_statusGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Duration_statusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Duration_statusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Duration_statusGroupByOutputType[P]>
            : GetScalarType<T[P], Duration_statusGroupByOutputType[P]>
        }
      >
    >


  export type duration_statusSelect = {
    id?: boolean
    name?: boolean
  }

  export type duration_statusGetPayload<
    S extends boolean | null | undefined | duration_statusArgs,
    U = keyof S
      > = S extends true
        ? duration_status
    : S extends undefined
    ? never
    : S extends duration_statusArgs | duration_statusFindManyArgs
    ?'include' extends U
    ? duration_status 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof duration_status ? duration_status[P] : never
  } 
    : duration_status
  : duration_status


  type duration_statusCountArgs = Merge<
    Omit<duration_statusFindManyArgs, 'select' | 'include'> & {
      select?: Duration_statusCountAggregateInputType | true
    }
  >

  export interface duration_statusDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Duration_status that matches the filter.
     * @param {duration_statusFindUniqueArgs} args - Arguments to find a Duration_status
     * @example
     * // Get one Duration_status
     * const duration_status = await prisma.duration_status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends duration_statusFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, duration_statusFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'duration_status'> extends True ? CheckSelect<T, Prisma__duration_statusClient<duration_status>, Prisma__duration_statusClient<duration_statusGetPayload<T>>> : CheckSelect<T, Prisma__duration_statusClient<duration_status | null >, Prisma__duration_statusClient<duration_statusGetPayload<T> | null >>

    /**
     * Find the first Duration_status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {duration_statusFindFirstArgs} args - Arguments to find a Duration_status
     * @example
     * // Get one Duration_status
     * const duration_status = await prisma.duration_status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends duration_statusFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, duration_statusFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'duration_status'> extends True ? CheckSelect<T, Prisma__duration_statusClient<duration_status>, Prisma__duration_statusClient<duration_statusGetPayload<T>>> : CheckSelect<T, Prisma__duration_statusClient<duration_status | null >, Prisma__duration_statusClient<duration_statusGetPayload<T> | null >>

    /**
     * Find zero or more Duration_statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {duration_statusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Duration_statuses
     * const duration_statuses = await prisma.duration_status.findMany()
     * 
     * // Get first 10 Duration_statuses
     * const duration_statuses = await prisma.duration_status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const duration_statusWithIdOnly = await prisma.duration_status.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends duration_statusFindManyArgs>(
      args?: SelectSubset<T, duration_statusFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<duration_status>>, PrismaPromise<Array<duration_statusGetPayload<T>>>>

    /**
     * Create a Duration_status.
     * @param {duration_statusCreateArgs} args - Arguments to create a Duration_status.
     * @example
     * // Create one Duration_status
     * const Duration_status = await prisma.duration_status.create({
     *   data: {
     *     // ... data to create a Duration_status
     *   }
     * })
     * 
    **/
    create<T extends duration_statusCreateArgs>(
      args: SelectSubset<T, duration_statusCreateArgs>
    ): CheckSelect<T, Prisma__duration_statusClient<duration_status>, Prisma__duration_statusClient<duration_statusGetPayload<T>>>

    /**
     * Create many Duration_statuses.
     *     @param {duration_statusCreateManyArgs} args - Arguments to create many Duration_statuses.
     *     @example
     *     // Create many Duration_statuses
     *     const duration_status = await prisma.duration_status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends duration_statusCreateManyArgs>(
      args?: SelectSubset<T, duration_statusCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Duration_status.
     * @param {duration_statusDeleteArgs} args - Arguments to delete one Duration_status.
     * @example
     * // Delete one Duration_status
     * const Duration_status = await prisma.duration_status.delete({
     *   where: {
     *     // ... filter to delete one Duration_status
     *   }
     * })
     * 
    **/
    delete<T extends duration_statusDeleteArgs>(
      args: SelectSubset<T, duration_statusDeleteArgs>
    ): CheckSelect<T, Prisma__duration_statusClient<duration_status>, Prisma__duration_statusClient<duration_statusGetPayload<T>>>

    /**
     * Update one Duration_status.
     * @param {duration_statusUpdateArgs} args - Arguments to update one Duration_status.
     * @example
     * // Update one Duration_status
     * const duration_status = await prisma.duration_status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends duration_statusUpdateArgs>(
      args: SelectSubset<T, duration_statusUpdateArgs>
    ): CheckSelect<T, Prisma__duration_statusClient<duration_status>, Prisma__duration_statusClient<duration_statusGetPayload<T>>>

    /**
     * Delete zero or more Duration_statuses.
     * @param {duration_statusDeleteManyArgs} args - Arguments to filter Duration_statuses to delete.
     * @example
     * // Delete a few Duration_statuses
     * const { count } = await prisma.duration_status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends duration_statusDeleteManyArgs>(
      args?: SelectSubset<T, duration_statusDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Duration_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {duration_statusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Duration_statuses
     * const duration_status = await prisma.duration_status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends duration_statusUpdateManyArgs>(
      args: SelectSubset<T, duration_statusUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Duration_status.
     * @param {duration_statusUpsertArgs} args - Arguments to update or create a Duration_status.
     * @example
     * // Update or create a Duration_status
     * const duration_status = await prisma.duration_status.upsert({
     *   create: {
     *     // ... data to create a Duration_status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Duration_status we want to update
     *   }
     * })
    **/
    upsert<T extends duration_statusUpsertArgs>(
      args: SelectSubset<T, duration_statusUpsertArgs>
    ): CheckSelect<T, Prisma__duration_statusClient<duration_status>, Prisma__duration_statusClient<duration_statusGetPayload<T>>>

    /**
     * Count the number of Duration_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {duration_statusCountArgs} args - Arguments to filter Duration_statuses to count.
     * @example
     * // Count the number of Duration_statuses
     * const count = await prisma.duration_status.count({
     *   where: {
     *     // ... the filter for the Duration_statuses we want to count
     *   }
     * })
    **/
    count<T extends duration_statusCountArgs>(
      args?: Subset<T, duration_statusCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Duration_statusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Duration_status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Duration_statusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Duration_statusAggregateArgs>(args: Subset<T, Duration_statusAggregateArgs>): PrismaPromise<GetDuration_statusAggregateType<T>>

    /**
     * Group by Duration_status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Duration_statusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Duration_statusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Duration_statusGroupByArgs['orderBy'] }
        : { orderBy?: Duration_statusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Duration_statusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDuration_statusGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for duration_status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__duration_statusClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * duration_status findUnique
   */
  export type duration_statusFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the duration_status
     * 
    **/
    select?: duration_statusSelect | null
    /**
     * Throw an Error if a duration_status can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which duration_status to fetch.
     * 
    **/
    where: duration_statusWhereUniqueInput
  }


  /**
   * duration_status findFirst
   */
  export type duration_statusFindFirstArgs = {
    /**
     * Select specific fields to fetch from the duration_status
     * 
    **/
    select?: duration_statusSelect | null
    /**
     * Throw an Error if a duration_status can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which duration_status to fetch.
     * 
    **/
    where?: duration_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of duration_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<duration_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for duration_statuses.
     * 
    **/
    cursor?: duration_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` duration_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` duration_statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of duration_statuses.
     * 
    **/
    distinct?: Enumerable<Duration_statusScalarFieldEnum>
  }


  /**
   * duration_status findMany
   */
  export type duration_statusFindManyArgs = {
    /**
     * Select specific fields to fetch from the duration_status
     * 
    **/
    select?: duration_statusSelect | null
    /**
     * Filter, which duration_statuses to fetch.
     * 
    **/
    where?: duration_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of duration_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<duration_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing duration_statuses.
     * 
    **/
    cursor?: duration_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` duration_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` duration_statuses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Duration_statusScalarFieldEnum>
  }


  /**
   * duration_status create
   */
  export type duration_statusCreateArgs = {
    /**
     * Select specific fields to fetch from the duration_status
     * 
    **/
    select?: duration_statusSelect | null
    /**
     * The data needed to create a duration_status.
     * 
    **/
    data: XOR<duration_statusCreateInput, duration_statusUncheckedCreateInput>
  }


  /**
   * duration_status createMany
   */
  export type duration_statusCreateManyArgs = {
    /**
     * The data used to create many duration_statuses.
     * 
    **/
    data: Enumerable<duration_statusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * duration_status update
   */
  export type duration_statusUpdateArgs = {
    /**
     * Select specific fields to fetch from the duration_status
     * 
    **/
    select?: duration_statusSelect | null
    /**
     * The data needed to update a duration_status.
     * 
    **/
    data: XOR<duration_statusUpdateInput, duration_statusUncheckedUpdateInput>
    /**
     * Choose, which duration_status to update.
     * 
    **/
    where: duration_statusWhereUniqueInput
  }


  /**
   * duration_status updateMany
   */
  export type duration_statusUpdateManyArgs = {
    /**
     * The data used to update duration_statuses.
     * 
    **/
    data: XOR<duration_statusUpdateManyMutationInput, duration_statusUncheckedUpdateManyInput>
    /**
     * Filter which duration_statuses to update
     * 
    **/
    where?: duration_statusWhereInput
  }


  /**
   * duration_status upsert
   */
  export type duration_statusUpsertArgs = {
    /**
     * Select specific fields to fetch from the duration_status
     * 
    **/
    select?: duration_statusSelect | null
    /**
     * The filter to search for the duration_status to update in case it exists.
     * 
    **/
    where: duration_statusWhereUniqueInput
    /**
     * In case the duration_status found by the `where` argument doesn't exist, create a new duration_status with this data.
     * 
    **/
    create: XOR<duration_statusCreateInput, duration_statusUncheckedCreateInput>
    /**
     * In case the duration_status was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<duration_statusUpdateInput, duration_statusUncheckedUpdateInput>
  }


  /**
   * duration_status delete
   */
  export type duration_statusDeleteArgs = {
    /**
     * Select specific fields to fetch from the duration_status
     * 
    **/
    select?: duration_statusSelect | null
    /**
     * Filter which duration_status to delete.
     * 
    **/
    where: duration_statusWhereUniqueInput
  }


  /**
   * duration_status deleteMany
   */
  export type duration_statusDeleteManyArgs = {
    /**
     * Filter which duration_statuses to delete
     * 
    **/
    where?: duration_statusWhereInput
  }


  /**
   * duration_status without action
   */
  export type duration_statusArgs = {
    /**
     * Select specific fields to fetch from the duration_status
     * 
    **/
    select?: duration_statusSelect | null
  }



  /**
   * Model customer
   */


  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    name: string | null
    phoneNo: string | null
    email: string | null
    createdDate: Date | null
    updatedDate: Date | null
    address: string | null
    nrc: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    phoneNo: string | null
    email: string | null
    createdDate: Date | null
    updatedDate: Date | null
    address: string | null
    nrc: string | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    name: number
    phoneNo: number
    email: number
    createdDate: number
    updatedDate: number
    address: number
    nrc: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    name?: true
    phoneNo?: true
    email?: true
    createdDate?: true
    updatedDate?: true
    address?: true
    nrc?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    name?: true
    phoneNo?: true
    email?: true
    createdDate?: true
    updatedDate?: true
    address?: true
    nrc?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    name?: true
    phoneNo?: true
    email?: true
    createdDate?: true
    updatedDate?: true
    address?: true
    nrc?: true
    _all?: true
  }

  export type CustomerAggregateArgs = {
    /**
     * Filter which customer to aggregate.
     * 
    **/
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     * 
    **/
    orderBy?: Enumerable<customerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs = {
    where?: customerWhereInput
    orderBy?: Enumerable<customerOrderByWithAggregationInput>
    by: Array<CustomerScalarFieldEnum>
    having?: customerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }


  export type CustomerGroupByOutputType = {
    id: number
    name: string
    phoneNo: string
    email: string
    createdDate: Date
    updatedDate: Date
    address: string
    nrc: string
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type customerSelect = {
    id?: boolean
    name?: boolean
    phoneNo?: boolean
    email?: boolean
    createdDate?: boolean
    updatedDate?: boolean
    address?: boolean
    nrc?: boolean
  }

  export type customerGetPayload<
    S extends boolean | null | undefined | customerArgs,
    U = keyof S
      > = S extends true
        ? customer
    : S extends undefined
    ? never
    : S extends customerArgs | customerFindManyArgs
    ?'include' extends U
    ? customer 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof customer ? customer[P] : never
  } 
    : customer
  : customer


  type customerCountArgs = Merge<
    Omit<customerFindManyArgs, 'select' | 'include'> & {
      select?: CustomerCountAggregateInputType | true
    }
  >

  export interface customerDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Customer that matches the filter.
     * @param {customerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends customerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, customerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'customer'> extends True ? CheckSelect<T, Prisma__customerClient<customer>, Prisma__customerClient<customerGetPayload<T>>> : CheckSelect<T, Prisma__customerClient<customer | null >, Prisma__customerClient<customerGetPayload<T> | null >>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends customerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, customerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'customer'> extends True ? CheckSelect<T, Prisma__customerClient<customer>, Prisma__customerClient<customerGetPayload<T>>> : CheckSelect<T, Prisma__customerClient<customer | null >, Prisma__customerClient<customerGetPayload<T> | null >>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends customerFindManyArgs>(
      args?: SelectSubset<T, customerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<customer>>, PrismaPromise<Array<customerGetPayload<T>>>>

    /**
     * Create a Customer.
     * @param {customerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
    **/
    create<T extends customerCreateArgs>(
      args: SelectSubset<T, customerCreateArgs>
    ): CheckSelect<T, Prisma__customerClient<customer>, Prisma__customerClient<customerGetPayload<T>>>

    /**
     * Create many Customers.
     *     @param {customerCreateManyArgs} args - Arguments to create many Customers.
     *     @example
     *     // Create many Customers
     *     const customer = await prisma.customer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends customerCreateManyArgs>(
      args?: SelectSubset<T, customerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Customer.
     * @param {customerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
    **/
    delete<T extends customerDeleteArgs>(
      args: SelectSubset<T, customerDeleteArgs>
    ): CheckSelect<T, Prisma__customerClient<customer>, Prisma__customerClient<customerGetPayload<T>>>

    /**
     * Update one Customer.
     * @param {customerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends customerUpdateArgs>(
      args: SelectSubset<T, customerUpdateArgs>
    ): CheckSelect<T, Prisma__customerClient<customer>, Prisma__customerClient<customerGetPayload<T>>>

    /**
     * Delete zero or more Customers.
     * @param {customerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends customerDeleteManyArgs>(
      args?: SelectSubset<T, customerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends customerUpdateManyArgs>(
      args: SelectSubset<T, customerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {customerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
    **/
    upsert<T extends customerUpsertArgs>(
      args: SelectSubset<T, customerUpsertArgs>
    ): CheckSelect<T, Prisma__customerClient<customer>, Prisma__customerClient<customerGetPayload<T>>>

    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends customerCountArgs>(
      args?: Subset<T, customerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__customerClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * customer findUnique
   */
  export type customerFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * Throw an Error if a customer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which customer to fetch.
     * 
    **/
    where: customerWhereUniqueInput
  }


  /**
   * customer findFirst
   */
  export type customerFindFirstArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * Throw an Error if a customer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which customer to fetch.
     * 
    **/
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     * 
    **/
    orderBy?: Enumerable<customerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     * 
    **/
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     * 
    **/
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * customer findMany
   */
  export type customerFindManyArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * Filter, which customers to fetch.
     * 
    **/
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     * 
    **/
    orderBy?: Enumerable<customerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customers.
     * 
    **/
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * customer create
   */
  export type customerCreateArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * The data needed to create a customer.
     * 
    **/
    data: XOR<customerCreateInput, customerUncheckedCreateInput>
  }


  /**
   * customer createMany
   */
  export type customerCreateManyArgs = {
    /**
     * The data used to create many customers.
     * 
    **/
    data: Enumerable<customerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * customer update
   */
  export type customerUpdateArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * The data needed to update a customer.
     * 
    **/
    data: XOR<customerUpdateInput, customerUncheckedUpdateInput>
    /**
     * Choose, which customer to update.
     * 
    **/
    where: customerWhereUniqueInput
  }


  /**
   * customer updateMany
   */
  export type customerUpdateManyArgs = {
    /**
     * The data used to update customers.
     * 
    **/
    data: XOR<customerUpdateManyMutationInput, customerUncheckedUpdateManyInput>
    /**
     * Filter which customers to update
     * 
    **/
    where?: customerWhereInput
  }


  /**
   * customer upsert
   */
  export type customerUpsertArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * The filter to search for the customer to update in case it exists.
     * 
    **/
    where: customerWhereUniqueInput
    /**
     * In case the customer found by the `where` argument doesn't exist, create a new customer with this data.
     * 
    **/
    create: XOR<customerCreateInput, customerUncheckedCreateInput>
    /**
     * In case the customer was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<customerUpdateInput, customerUncheckedUpdateInput>
  }


  /**
   * customer delete
   */
  export type customerDeleteArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
    /**
     * Filter which customer to delete.
     * 
    **/
    where: customerWhereUniqueInput
  }


  /**
   * customer deleteMany
   */
  export type customerDeleteManyArgs = {
    /**
     * Filter which customers to delete
     * 
    **/
    where?: customerWhereInput
  }


  /**
   * customer without action
   */
  export type customerArgs = {
    /**
     * Select specific fields to fetch from the customer
     * 
    **/
    select?: customerSelect | null
  }



  /**
   * Model booking
   */


  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    id: number | null
    customerId: number | null
    durationDay: number | null
    durationType: number | null
    status: number | null
  }

  export type BookingSumAggregateOutputType = {
    id: number | null
    customerId: number | null
    durationDay: number | null
    durationType: number | null
    status: number | null
  }

  export type BookingMinAggregateOutputType = {
    id: number | null
    customerId: number | null
    carNo: string | null
    note: string | null
    createdDate: Date | null
    updatedDate: Date | null
    durationDay: number | null
    durationType: number | null
    status: number | null
    service: string | null
  }

  export type BookingMaxAggregateOutputType = {
    id: number | null
    customerId: number | null
    carNo: string | null
    note: string | null
    createdDate: Date | null
    updatedDate: Date | null
    durationDay: number | null
    durationType: number | null
    status: number | null
    service: string | null
  }

  export type BookingCountAggregateOutputType = {
    id: number
    customerId: number
    carNo: number
    note: number
    createdDate: number
    updatedDate: number
    durationDay: number
    durationType: number
    status: number
    service: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    id?: true
    customerId?: true
    durationDay?: true
    durationType?: true
    status?: true
  }

  export type BookingSumAggregateInputType = {
    id?: true
    customerId?: true
    durationDay?: true
    durationType?: true
    status?: true
  }

  export type BookingMinAggregateInputType = {
    id?: true
    customerId?: true
    carNo?: true
    note?: true
    createdDate?: true
    updatedDate?: true
    durationDay?: true
    durationType?: true
    status?: true
    service?: true
  }

  export type BookingMaxAggregateInputType = {
    id?: true
    customerId?: true
    carNo?: true
    note?: true
    createdDate?: true
    updatedDate?: true
    durationDay?: true
    durationType?: true
    status?: true
    service?: true
  }

  export type BookingCountAggregateInputType = {
    id?: true
    customerId?: true
    carNo?: true
    note?: true
    createdDate?: true
    updatedDate?: true
    durationDay?: true
    durationType?: true
    status?: true
    service?: true
    _all?: true
  }

  export type BookingAggregateArgs = {
    /**
     * Filter which booking to aggregate.
     * 
    **/
    where?: bookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<bookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: bookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs = {
    where?: bookingWhereInput
    orderBy?: Enumerable<bookingOrderByWithAggregationInput>
    by: Array<BookingScalarFieldEnum>
    having?: bookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }


  export type BookingGroupByOutputType = {
    id: number
    customerId: number
    carNo: string
    note: string
    createdDate: Date
    updatedDate: Date
    durationDay: number
    durationType: number
    status: number
    service: string
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type bookingSelect = {
    id?: boolean
    customerId?: boolean
    carNo?: boolean
    note?: boolean
    createdDate?: boolean
    updatedDate?: boolean
    durationDay?: boolean
    durationType?: boolean
    status?: boolean
    service?: boolean
  }

  export type bookingGetPayload<
    S extends boolean | null | undefined | bookingArgs,
    U = keyof S
      > = S extends true
        ? booking
    : S extends undefined
    ? never
    : S extends bookingArgs | bookingFindManyArgs
    ?'include' extends U
    ? booking 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof booking ? booking[P] : never
  } 
    : booking
  : booking


  type bookingCountArgs = Merge<
    Omit<bookingFindManyArgs, 'select' | 'include'> & {
      select?: BookingCountAggregateInputType | true
    }
  >

  export interface bookingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Booking that matches the filter.
     * @param {bookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends bookingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, bookingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'booking'> extends True ? CheckSelect<T, Prisma__bookingClient<booking>, Prisma__bookingClient<bookingGetPayload<T>>> : CheckSelect<T, Prisma__bookingClient<booking | null >, Prisma__bookingClient<bookingGetPayload<T> | null >>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends bookingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, bookingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'booking'> extends True ? CheckSelect<T, Prisma__bookingClient<booking>, Prisma__bookingClient<bookingGetPayload<T>>> : CheckSelect<T, Prisma__bookingClient<booking | null >, Prisma__bookingClient<bookingGetPayload<T> | null >>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends bookingFindManyArgs>(
      args?: SelectSubset<T, bookingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<booking>>, PrismaPromise<Array<bookingGetPayload<T>>>>

    /**
     * Create a Booking.
     * @param {bookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
    **/
    create<T extends bookingCreateArgs>(
      args: SelectSubset<T, bookingCreateArgs>
    ): CheckSelect<T, Prisma__bookingClient<booking>, Prisma__bookingClient<bookingGetPayload<T>>>

    /**
     * Create many Bookings.
     *     @param {bookingCreateManyArgs} args - Arguments to create many Bookings.
     *     @example
     *     // Create many Bookings
     *     const booking = await prisma.booking.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends bookingCreateManyArgs>(
      args?: SelectSubset<T, bookingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Booking.
     * @param {bookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
    **/
    delete<T extends bookingDeleteArgs>(
      args: SelectSubset<T, bookingDeleteArgs>
    ): CheckSelect<T, Prisma__bookingClient<booking>, Prisma__bookingClient<bookingGetPayload<T>>>

    /**
     * Update one Booking.
     * @param {bookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends bookingUpdateArgs>(
      args: SelectSubset<T, bookingUpdateArgs>
    ): CheckSelect<T, Prisma__bookingClient<booking>, Prisma__bookingClient<bookingGetPayload<T>>>

    /**
     * Delete zero or more Bookings.
     * @param {bookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends bookingDeleteManyArgs>(
      args?: SelectSubset<T, bookingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends bookingUpdateManyArgs>(
      args: SelectSubset<T, bookingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Booking.
     * @param {bookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
    **/
    upsert<T extends bookingUpsertArgs>(
      args: SelectSubset<T, bookingUpsertArgs>
    ): CheckSelect<T, Prisma__bookingClient<booking>, Prisma__bookingClient<bookingGetPayload<T>>>

    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends bookingCountArgs>(
      args?: Subset<T, bookingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__bookingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * booking findUnique
   */
  export type bookingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the booking
     * 
    **/
    select?: bookingSelect | null
    /**
     * Throw an Error if a booking can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which booking to fetch.
     * 
    **/
    where: bookingWhereUniqueInput
  }


  /**
   * booking findFirst
   */
  export type bookingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the booking
     * 
    **/
    select?: bookingSelect | null
    /**
     * Throw an Error if a booking can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which booking to fetch.
     * 
    **/
    where?: bookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<bookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bookings.
     * 
    **/
    cursor?: bookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bookings.
     * 
    **/
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * booking findMany
   */
  export type bookingFindManyArgs = {
    /**
     * Select specific fields to fetch from the booking
     * 
    **/
    select?: bookingSelect | null
    /**
     * Filter, which bookings to fetch.
     * 
    **/
    where?: bookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<bookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bookings.
     * 
    **/
    cursor?: bookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bookings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * booking create
   */
  export type bookingCreateArgs = {
    /**
     * Select specific fields to fetch from the booking
     * 
    **/
    select?: bookingSelect | null
    /**
     * The data needed to create a booking.
     * 
    **/
    data: XOR<bookingCreateInput, bookingUncheckedCreateInput>
  }


  /**
   * booking createMany
   */
  export type bookingCreateManyArgs = {
    /**
     * The data used to create many bookings.
     * 
    **/
    data: Enumerable<bookingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * booking update
   */
  export type bookingUpdateArgs = {
    /**
     * Select specific fields to fetch from the booking
     * 
    **/
    select?: bookingSelect | null
    /**
     * The data needed to update a booking.
     * 
    **/
    data: XOR<bookingUpdateInput, bookingUncheckedUpdateInput>
    /**
     * Choose, which booking to update.
     * 
    **/
    where: bookingWhereUniqueInput
  }


  /**
   * booking updateMany
   */
  export type bookingUpdateManyArgs = {
    /**
     * The data used to update bookings.
     * 
    **/
    data: XOR<bookingUpdateManyMutationInput, bookingUncheckedUpdateManyInput>
    /**
     * Filter which bookings to update
     * 
    **/
    where?: bookingWhereInput
  }


  /**
   * booking upsert
   */
  export type bookingUpsertArgs = {
    /**
     * Select specific fields to fetch from the booking
     * 
    **/
    select?: bookingSelect | null
    /**
     * The filter to search for the booking to update in case it exists.
     * 
    **/
    where: bookingWhereUniqueInput
    /**
     * In case the booking found by the `where` argument doesn't exist, create a new booking with this data.
     * 
    **/
    create: XOR<bookingCreateInput, bookingUncheckedCreateInput>
    /**
     * In case the booking was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<bookingUpdateInput, bookingUncheckedUpdateInput>
  }


  /**
   * booking delete
   */
  export type bookingDeleteArgs = {
    /**
     * Select specific fields to fetch from the booking
     * 
    **/
    select?: bookingSelect | null
    /**
     * Filter which booking to delete.
     * 
    **/
    where: bookingWhereUniqueInput
  }


  /**
   * booking deleteMany
   */
  export type bookingDeleteManyArgs = {
    /**
     * Filter which bookings to delete
     * 
    **/
    where?: bookingWhereInput
  }


  /**
   * booking without action
   */
  export type bookingArgs = {
    /**
     * Select specific fields to fetch from the booking
     * 
    **/
    select?: bookingSelect | null
  }



  /**
   * Model booking_status
   */


  export type AggregateBooking_status = {
    _count: Booking_statusCountAggregateOutputType | null
    _avg: Booking_statusAvgAggregateOutputType | null
    _sum: Booking_statusSumAggregateOutputType | null
    _min: Booking_statusMinAggregateOutputType | null
    _max: Booking_statusMaxAggregateOutputType | null
  }

  export type Booking_statusAvgAggregateOutputType = {
    id: number | null
  }

  export type Booking_statusSumAggregateOutputType = {
    id: number | null
  }

  export type Booking_statusMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type Booking_statusMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type Booking_statusCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type Booking_statusAvgAggregateInputType = {
    id?: true
  }

  export type Booking_statusSumAggregateInputType = {
    id?: true
  }

  export type Booking_statusMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type Booking_statusMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type Booking_statusCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type Booking_statusAggregateArgs = {
    /**
     * Filter which booking_status to aggregate.
     * 
    **/
    where?: booking_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of booking_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<booking_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: booking_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` booking_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` booking_statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned booking_statuses
    **/
    _count?: true | Booking_statusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Booking_statusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Booking_statusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Booking_statusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Booking_statusMaxAggregateInputType
  }

  export type GetBooking_statusAggregateType<T extends Booking_statusAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking_status]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking_status[P]>
      : GetScalarType<T[P], AggregateBooking_status[P]>
  }




  export type Booking_statusGroupByArgs = {
    where?: booking_statusWhereInput
    orderBy?: Enumerable<booking_statusOrderByWithAggregationInput>
    by: Array<Booking_statusScalarFieldEnum>
    having?: booking_statusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Booking_statusCountAggregateInputType | true
    _avg?: Booking_statusAvgAggregateInputType
    _sum?: Booking_statusSumAggregateInputType
    _min?: Booking_statusMinAggregateInputType
    _max?: Booking_statusMaxAggregateInputType
  }


  export type Booking_statusGroupByOutputType = {
    id: number
    name: string
    _count: Booking_statusCountAggregateOutputType | null
    _avg: Booking_statusAvgAggregateOutputType | null
    _sum: Booking_statusSumAggregateOutputType | null
    _min: Booking_statusMinAggregateOutputType | null
    _max: Booking_statusMaxAggregateOutputType | null
  }

  type GetBooking_statusGroupByPayload<T extends Booking_statusGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Booking_statusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Booking_statusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Booking_statusGroupByOutputType[P]>
            : GetScalarType<T[P], Booking_statusGroupByOutputType[P]>
        }
      >
    >


  export type booking_statusSelect = {
    id?: boolean
    name?: boolean
  }

  export type booking_statusGetPayload<
    S extends boolean | null | undefined | booking_statusArgs,
    U = keyof S
      > = S extends true
        ? booking_status
    : S extends undefined
    ? never
    : S extends booking_statusArgs | booking_statusFindManyArgs
    ?'include' extends U
    ? booking_status 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof booking_status ? booking_status[P] : never
  } 
    : booking_status
  : booking_status


  type booking_statusCountArgs = Merge<
    Omit<booking_statusFindManyArgs, 'select' | 'include'> & {
      select?: Booking_statusCountAggregateInputType | true
    }
  >

  export interface booking_statusDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Booking_status that matches the filter.
     * @param {booking_statusFindUniqueArgs} args - Arguments to find a Booking_status
     * @example
     * // Get one Booking_status
     * const booking_status = await prisma.booking_status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends booking_statusFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, booking_statusFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'booking_status'> extends True ? CheckSelect<T, Prisma__booking_statusClient<booking_status>, Prisma__booking_statusClient<booking_statusGetPayload<T>>> : CheckSelect<T, Prisma__booking_statusClient<booking_status | null >, Prisma__booking_statusClient<booking_statusGetPayload<T> | null >>

    /**
     * Find the first Booking_status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booking_statusFindFirstArgs} args - Arguments to find a Booking_status
     * @example
     * // Get one Booking_status
     * const booking_status = await prisma.booking_status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends booking_statusFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, booking_statusFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'booking_status'> extends True ? CheckSelect<T, Prisma__booking_statusClient<booking_status>, Prisma__booking_statusClient<booking_statusGetPayload<T>>> : CheckSelect<T, Prisma__booking_statusClient<booking_status | null >, Prisma__booking_statusClient<booking_statusGetPayload<T> | null >>

    /**
     * Find zero or more Booking_statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booking_statusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Booking_statuses
     * const booking_statuses = await prisma.booking_status.findMany()
     * 
     * // Get first 10 Booking_statuses
     * const booking_statuses = await prisma.booking_status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const booking_statusWithIdOnly = await prisma.booking_status.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends booking_statusFindManyArgs>(
      args?: SelectSubset<T, booking_statusFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<booking_status>>, PrismaPromise<Array<booking_statusGetPayload<T>>>>

    /**
     * Create a Booking_status.
     * @param {booking_statusCreateArgs} args - Arguments to create a Booking_status.
     * @example
     * // Create one Booking_status
     * const Booking_status = await prisma.booking_status.create({
     *   data: {
     *     // ... data to create a Booking_status
     *   }
     * })
     * 
    **/
    create<T extends booking_statusCreateArgs>(
      args: SelectSubset<T, booking_statusCreateArgs>
    ): CheckSelect<T, Prisma__booking_statusClient<booking_status>, Prisma__booking_statusClient<booking_statusGetPayload<T>>>

    /**
     * Create many Booking_statuses.
     *     @param {booking_statusCreateManyArgs} args - Arguments to create many Booking_statuses.
     *     @example
     *     // Create many Booking_statuses
     *     const booking_status = await prisma.booking_status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends booking_statusCreateManyArgs>(
      args?: SelectSubset<T, booking_statusCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Booking_status.
     * @param {booking_statusDeleteArgs} args - Arguments to delete one Booking_status.
     * @example
     * // Delete one Booking_status
     * const Booking_status = await prisma.booking_status.delete({
     *   where: {
     *     // ... filter to delete one Booking_status
     *   }
     * })
     * 
    **/
    delete<T extends booking_statusDeleteArgs>(
      args: SelectSubset<T, booking_statusDeleteArgs>
    ): CheckSelect<T, Prisma__booking_statusClient<booking_status>, Prisma__booking_statusClient<booking_statusGetPayload<T>>>

    /**
     * Update one Booking_status.
     * @param {booking_statusUpdateArgs} args - Arguments to update one Booking_status.
     * @example
     * // Update one Booking_status
     * const booking_status = await prisma.booking_status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends booking_statusUpdateArgs>(
      args: SelectSubset<T, booking_statusUpdateArgs>
    ): CheckSelect<T, Prisma__booking_statusClient<booking_status>, Prisma__booking_statusClient<booking_statusGetPayload<T>>>

    /**
     * Delete zero or more Booking_statuses.
     * @param {booking_statusDeleteManyArgs} args - Arguments to filter Booking_statuses to delete.
     * @example
     * // Delete a few Booking_statuses
     * const { count } = await prisma.booking_status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends booking_statusDeleteManyArgs>(
      args?: SelectSubset<T, booking_statusDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Booking_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booking_statusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Booking_statuses
     * const booking_status = await prisma.booking_status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends booking_statusUpdateManyArgs>(
      args: SelectSubset<T, booking_statusUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Booking_status.
     * @param {booking_statusUpsertArgs} args - Arguments to update or create a Booking_status.
     * @example
     * // Update or create a Booking_status
     * const booking_status = await prisma.booking_status.upsert({
     *   create: {
     *     // ... data to create a Booking_status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking_status we want to update
     *   }
     * })
    **/
    upsert<T extends booking_statusUpsertArgs>(
      args: SelectSubset<T, booking_statusUpsertArgs>
    ): CheckSelect<T, Prisma__booking_statusClient<booking_status>, Prisma__booking_statusClient<booking_statusGetPayload<T>>>

    /**
     * Count the number of Booking_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booking_statusCountArgs} args - Arguments to filter Booking_statuses to count.
     * @example
     * // Count the number of Booking_statuses
     * const count = await prisma.booking_status.count({
     *   where: {
     *     // ... the filter for the Booking_statuses we want to count
     *   }
     * })
    **/
    count<T extends booking_statusCountArgs>(
      args?: Subset<T, booking_statusCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Booking_statusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking_status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Booking_statusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Booking_statusAggregateArgs>(args: Subset<T, Booking_statusAggregateArgs>): PrismaPromise<GetBooking_statusAggregateType<T>>

    /**
     * Group by Booking_status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Booking_statusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Booking_statusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Booking_statusGroupByArgs['orderBy'] }
        : { orderBy?: Booking_statusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Booking_statusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBooking_statusGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for booking_status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__booking_statusClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * booking_status findUnique
   */
  export type booking_statusFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the booking_status
     * 
    **/
    select?: booking_statusSelect | null
    /**
     * Throw an Error if a booking_status can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which booking_status to fetch.
     * 
    **/
    where: booking_statusWhereUniqueInput
  }


  /**
   * booking_status findFirst
   */
  export type booking_statusFindFirstArgs = {
    /**
     * Select specific fields to fetch from the booking_status
     * 
    **/
    select?: booking_statusSelect | null
    /**
     * Throw an Error if a booking_status can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which booking_status to fetch.
     * 
    **/
    where?: booking_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of booking_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<booking_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for booking_statuses.
     * 
    **/
    cursor?: booking_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` booking_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` booking_statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of booking_statuses.
     * 
    **/
    distinct?: Enumerable<Booking_statusScalarFieldEnum>
  }


  /**
   * booking_status findMany
   */
  export type booking_statusFindManyArgs = {
    /**
     * Select specific fields to fetch from the booking_status
     * 
    **/
    select?: booking_statusSelect | null
    /**
     * Filter, which booking_statuses to fetch.
     * 
    **/
    where?: booking_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of booking_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<booking_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing booking_statuses.
     * 
    **/
    cursor?: booking_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` booking_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` booking_statuses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Booking_statusScalarFieldEnum>
  }


  /**
   * booking_status create
   */
  export type booking_statusCreateArgs = {
    /**
     * Select specific fields to fetch from the booking_status
     * 
    **/
    select?: booking_statusSelect | null
    /**
     * The data needed to create a booking_status.
     * 
    **/
    data: XOR<booking_statusCreateInput, booking_statusUncheckedCreateInput>
  }


  /**
   * booking_status createMany
   */
  export type booking_statusCreateManyArgs = {
    /**
     * The data used to create many booking_statuses.
     * 
    **/
    data: Enumerable<booking_statusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * booking_status update
   */
  export type booking_statusUpdateArgs = {
    /**
     * Select specific fields to fetch from the booking_status
     * 
    **/
    select?: booking_statusSelect | null
    /**
     * The data needed to update a booking_status.
     * 
    **/
    data: XOR<booking_statusUpdateInput, booking_statusUncheckedUpdateInput>
    /**
     * Choose, which booking_status to update.
     * 
    **/
    where: booking_statusWhereUniqueInput
  }


  /**
   * booking_status updateMany
   */
  export type booking_statusUpdateManyArgs = {
    /**
     * The data used to update booking_statuses.
     * 
    **/
    data: XOR<booking_statusUpdateManyMutationInput, booking_statusUncheckedUpdateManyInput>
    /**
     * Filter which booking_statuses to update
     * 
    **/
    where?: booking_statusWhereInput
  }


  /**
   * booking_status upsert
   */
  export type booking_statusUpsertArgs = {
    /**
     * Select specific fields to fetch from the booking_status
     * 
    **/
    select?: booking_statusSelect | null
    /**
     * The filter to search for the booking_status to update in case it exists.
     * 
    **/
    where: booking_statusWhereUniqueInput
    /**
     * In case the booking_status found by the `where` argument doesn't exist, create a new booking_status with this data.
     * 
    **/
    create: XOR<booking_statusCreateInput, booking_statusUncheckedCreateInput>
    /**
     * In case the booking_status was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<booking_statusUpdateInput, booking_statusUncheckedUpdateInput>
  }


  /**
   * booking_status delete
   */
  export type booking_statusDeleteArgs = {
    /**
     * Select specific fields to fetch from the booking_status
     * 
    **/
    select?: booking_statusSelect | null
    /**
     * Filter which booking_status to delete.
     * 
    **/
    where: booking_statusWhereUniqueInput
  }


  /**
   * booking_status deleteMany
   */
  export type booking_statusDeleteManyArgs = {
    /**
     * Filter which booking_statuses to delete
     * 
    **/
    where?: booking_statusWhereInput
  }


  /**
   * booking_status without action
   */
  export type booking_statusArgs = {
    /**
     * Select specific fields to fetch from the booking_status
     * 
    **/
    select?: booking_statusSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    fullName: 'fullName',
    userRole: 'userRole',
    phoneNo: 'phoneNo',
    userName: 'userName',
    createdDate: 'createdDate',
    updatedDate: 'updatedDate',
    password: 'password',
    isActive: 'isActive'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    fee: 'fee'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const Duration_statusScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type Duration_statusScalarFieldEnum = (typeof Duration_statusScalarFieldEnum)[keyof typeof Duration_statusScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phoneNo: 'phoneNo',
    email: 'email',
    createdDate: 'createdDate',
    updatedDate: 'updatedDate',
    address: 'address',
    nrc: 'nrc'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    carNo: 'carNo',
    note: 'note',
    createdDate: 'createdDate',
    updatedDate: 'updatedDate',
    durationDay: 'durationDay',
    durationType: 'durationType',
    status: 'status',
    service: 'service'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const Booking_statusScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type Booking_statusScalarFieldEnum = (typeof Booking_statusScalarFieldEnum)[keyof typeof Booking_statusScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    fullName?: StringFilter | string
    userRole?: IntFilter | number
    phoneNo?: StringFilter | string
    userName?: StringFilter | string
    createdDate?: DateTimeFilter | Date | string
    updatedDate?: DateTimeFilter | Date | string
    password?: StringFilter | string
    isActive?: BoolFilter | boolean
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    userRole?: SortOrder
    phoneNo?: SortOrder
    userName?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    password?: SortOrder
    isActive?: SortOrder
  }

  export type userWhereUniqueInput = {
    id?: number
    email?: string
    phoneNo?: string
    userName?: string
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    userRole?: SortOrder
    phoneNo?: SortOrder
    userName?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    password?: SortOrder
    isActive?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    fullName?: StringWithAggregatesFilter | string
    userRole?: IntWithAggregatesFilter | number
    phoneNo?: StringWithAggregatesFilter | string
    userName?: StringWithAggregatesFilter | string
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    updatedDate?: DateTimeWithAggregatesFilter | Date | string
    password?: StringWithAggregatesFilter | string
    isActive?: BoolWithAggregatesFilter | boolean
  }

  export type userRoleWhereInput = {
    AND?: Enumerable<userRoleWhereInput>
    OR?: Enumerable<userRoleWhereInput>
    NOT?: Enumerable<userRoleWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type userRoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type userRoleWhereUniqueInput = {
    id?: number
  }

  export type userRoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: userRoleCountOrderByAggregateInput
    _avg?: userRoleAvgOrderByAggregateInput
    _max?: userRoleMaxOrderByAggregateInput
    _min?: userRoleMinOrderByAggregateInput
    _sum?: userRoleSumOrderByAggregateInput
  }

  export type userRoleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userRoleScalarWhereWithAggregatesInput>
    OR?: Enumerable<userRoleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userRoleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type serviceWhereInput = {
    AND?: Enumerable<serviceWhereInput>
    OR?: Enumerable<serviceWhereInput>
    NOT?: Enumerable<serviceWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    fee?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type serviceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
  }

  export type serviceWhereUniqueInput = {
    id?: number
  }

  export type serviceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
    _count?: serviceCountOrderByAggregateInput
    _avg?: serviceAvgOrderByAggregateInput
    _max?: serviceMaxOrderByAggregateInput
    _min?: serviceMinOrderByAggregateInput
    _sum?: serviceSumOrderByAggregateInput
  }

  export type serviceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<serviceScalarWhereWithAggregatesInput>
    OR?: Enumerable<serviceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<serviceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    fee?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type duration_statusWhereInput = {
    AND?: Enumerable<duration_statusWhereInput>
    OR?: Enumerable<duration_statusWhereInput>
    NOT?: Enumerable<duration_statusWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type duration_statusOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type duration_statusWhereUniqueInput = {
    id?: number
  }

  export type duration_statusOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: duration_statusCountOrderByAggregateInput
    _avg?: duration_statusAvgOrderByAggregateInput
    _max?: duration_statusMaxOrderByAggregateInput
    _min?: duration_statusMinOrderByAggregateInput
    _sum?: duration_statusSumOrderByAggregateInput
  }

  export type duration_statusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<duration_statusScalarWhereWithAggregatesInput>
    OR?: Enumerable<duration_statusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<duration_statusScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type customerWhereInput = {
    AND?: Enumerable<customerWhereInput>
    OR?: Enumerable<customerWhereInput>
    NOT?: Enumerable<customerWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    phoneNo?: StringFilter | string
    email?: StringFilter | string
    createdDate?: DateTimeFilter | Date | string
    updatedDate?: DateTimeFilter | Date | string
    address?: StringFilter | string
    nrc?: StringFilter | string
  }

  export type customerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phoneNo?: SortOrder
    email?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    address?: SortOrder
    nrc?: SortOrder
  }

  export type customerWhereUniqueInput = {
    id?: number
    phoneNo?: string
    email?: string
    nrc?: string
  }

  export type customerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phoneNo?: SortOrder
    email?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    address?: SortOrder
    nrc?: SortOrder
    _count?: customerCountOrderByAggregateInput
    _avg?: customerAvgOrderByAggregateInput
    _max?: customerMaxOrderByAggregateInput
    _min?: customerMinOrderByAggregateInput
    _sum?: customerSumOrderByAggregateInput
  }

  export type customerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<customerScalarWhereWithAggregatesInput>
    OR?: Enumerable<customerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<customerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    phoneNo?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    updatedDate?: DateTimeWithAggregatesFilter | Date | string
    address?: StringWithAggregatesFilter | string
    nrc?: StringWithAggregatesFilter | string
  }

  export type bookingWhereInput = {
    AND?: Enumerable<bookingWhereInput>
    OR?: Enumerable<bookingWhereInput>
    NOT?: Enumerable<bookingWhereInput>
    id?: IntFilter | number
    customerId?: IntFilter | number
    carNo?: StringFilter | string
    note?: StringFilter | string
    createdDate?: DateTimeFilter | Date | string
    updatedDate?: DateTimeFilter | Date | string
    durationDay?: IntFilter | number
    durationType?: IntFilter | number
    status?: IntFilter | number
    service?: StringFilter | string
  }

  export type bookingOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    carNo?: SortOrder
    note?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    durationDay?: SortOrder
    durationType?: SortOrder
    status?: SortOrder
    service?: SortOrder
  }

  export type bookingWhereUniqueInput = {
    id?: number
  }

  export type bookingOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    carNo?: SortOrder
    note?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    durationDay?: SortOrder
    durationType?: SortOrder
    status?: SortOrder
    service?: SortOrder
    _count?: bookingCountOrderByAggregateInput
    _avg?: bookingAvgOrderByAggregateInput
    _max?: bookingMaxOrderByAggregateInput
    _min?: bookingMinOrderByAggregateInput
    _sum?: bookingSumOrderByAggregateInput
  }

  export type bookingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<bookingScalarWhereWithAggregatesInput>
    OR?: Enumerable<bookingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<bookingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    customerId?: IntWithAggregatesFilter | number
    carNo?: StringWithAggregatesFilter | string
    note?: StringWithAggregatesFilter | string
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    updatedDate?: DateTimeWithAggregatesFilter | Date | string
    durationDay?: IntWithAggregatesFilter | number
    durationType?: IntWithAggregatesFilter | number
    status?: IntWithAggregatesFilter | number
    service?: StringWithAggregatesFilter | string
  }

  export type booking_statusWhereInput = {
    AND?: Enumerable<booking_statusWhereInput>
    OR?: Enumerable<booking_statusWhereInput>
    NOT?: Enumerable<booking_statusWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type booking_statusOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type booking_statusWhereUniqueInput = {
    id?: number
  }

  export type booking_statusOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: booking_statusCountOrderByAggregateInput
    _avg?: booking_statusAvgOrderByAggregateInput
    _max?: booking_statusMaxOrderByAggregateInput
    _min?: booking_statusMinOrderByAggregateInput
    _sum?: booking_statusSumOrderByAggregateInput
  }

  export type booking_statusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<booking_statusScalarWhereWithAggregatesInput>
    OR?: Enumerable<booking_statusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<booking_statusScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type userCreateInput = {
    email: string
    fullName: string
    userRole: number
    phoneNo: string
    userName: string
    createdDate?: Date | string
    updatedDate?: Date | string
    password: string
    isActive: boolean
  }

  export type userUncheckedCreateInput = {
    id?: number
    email: string
    fullName: string
    userRole: number
    phoneNo: string
    userName: string
    createdDate?: Date | string
    updatedDate?: Date | string
    password: string
    isActive: boolean
  }

  export type userUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    userRole?: IntFieldUpdateOperationsInput | number
    phoneNo?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    userRole?: IntFieldUpdateOperationsInput | number
    phoneNo?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userCreateManyInput = {
    id?: number
    email: string
    fullName: string
    userRole: number
    phoneNo: string
    userName: string
    createdDate?: Date | string
    updatedDate?: Date | string
    password: string
    isActive: boolean
  }

  export type userUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    userRole?: IntFieldUpdateOperationsInput | number
    phoneNo?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    userRole?: IntFieldUpdateOperationsInput | number
    phoneNo?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userRoleCreateInput = {
    name: string
  }

  export type userRoleUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type userRoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type userRoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type userRoleCreateManyInput = {
    id?: number
    name: string
  }

  export type userRoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type userRoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type serviceCreateInput = {
    name: string
    fee: Decimal | DecimalJsLike | number | string
  }

  export type serviceUncheckedCreateInput = {
    id?: number
    name: string
    fee: Decimal | DecimalJsLike | number | string
  }

  export type serviceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    fee?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type serviceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fee?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type serviceCreateManyInput = {
    id?: number
    name: string
    fee: Decimal | DecimalJsLike | number | string
  }

  export type serviceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    fee?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type serviceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fee?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type duration_statusCreateInput = {
    name: string
  }

  export type duration_statusUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type duration_statusUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type duration_statusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type duration_statusCreateManyInput = {
    id?: number
    name: string
  }

  export type duration_statusUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type duration_statusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type customerCreateInput = {
    name: string
    phoneNo: string
    email: string
    createdDate?: Date | string
    updatedDate?: Date | string
    address: string
    nrc: string
  }

  export type customerUncheckedCreateInput = {
    id?: number
    name: string
    phoneNo: string
    email: string
    createdDate?: Date | string
    updatedDate?: Date | string
    address: string
    nrc: string
  }

  export type customerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nrc?: StringFieldUpdateOperationsInput | string
  }

  export type customerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nrc?: StringFieldUpdateOperationsInput | string
  }

  export type customerCreateManyInput = {
    id?: number
    name: string
    phoneNo: string
    email: string
    createdDate?: Date | string
    updatedDate?: Date | string
    address: string
    nrc: string
  }

  export type customerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nrc?: StringFieldUpdateOperationsInput | string
  }

  export type customerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    nrc?: StringFieldUpdateOperationsInput | string
  }

  export type bookingCreateInput = {
    customerId: number
    carNo: string
    note: string
    createdDate?: Date | string
    updatedDate?: Date | string
    durationDay: number
    durationType: number
    status: number
    service: string
  }

  export type bookingUncheckedCreateInput = {
    id?: number
    customerId: number
    carNo: string
    note: string
    createdDate?: Date | string
    updatedDate?: Date | string
    durationDay: number
    durationType: number
    status: number
    service: string
  }

  export type bookingUpdateInput = {
    customerId?: IntFieldUpdateOperationsInput | number
    carNo?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationDay?: IntFieldUpdateOperationsInput | number
    durationType?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    service?: StringFieldUpdateOperationsInput | string
  }

  export type bookingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    carNo?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationDay?: IntFieldUpdateOperationsInput | number
    durationType?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    service?: StringFieldUpdateOperationsInput | string
  }

  export type bookingCreateManyInput = {
    id?: number
    customerId: number
    carNo: string
    note: string
    createdDate?: Date | string
    updatedDate?: Date | string
    durationDay: number
    durationType: number
    status: number
    service: string
  }

  export type bookingUpdateManyMutationInput = {
    customerId?: IntFieldUpdateOperationsInput | number
    carNo?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationDay?: IntFieldUpdateOperationsInput | number
    durationType?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    service?: StringFieldUpdateOperationsInput | string
  }

  export type bookingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    carNo?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationDay?: IntFieldUpdateOperationsInput | number
    durationType?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    service?: StringFieldUpdateOperationsInput | string
  }

  export type booking_statusCreateInput = {
    name: string
  }

  export type booking_statusUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type booking_statusUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type booking_statusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type booking_statusCreateManyInput = {
    id?: number
    name: string
  }

  export type booking_statusUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type booking_statusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    userRole?: SortOrder
    phoneNo?: SortOrder
    userName?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    password?: SortOrder
    isActive?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
    userRole?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    userRole?: SortOrder
    phoneNo?: SortOrder
    userName?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    password?: SortOrder
    isActive?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    userRole?: SortOrder
    phoneNo?: SortOrder
    userName?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    password?: SortOrder
    isActive?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
    userRole?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type userRoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type userRoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type userRoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type userRoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type serviceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
  }

  export type serviceAvgOrderByAggregateInput = {
    id?: SortOrder
    fee?: SortOrder
  }

  export type serviceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
  }

  export type serviceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
  }

  export type serviceSumOrderByAggregateInput = {
    id?: SortOrder
    fee?: SortOrder
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type duration_statusCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type duration_statusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type duration_statusMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type duration_statusMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type duration_statusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type customerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phoneNo?: SortOrder
    email?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    address?: SortOrder
    nrc?: SortOrder
  }

  export type customerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type customerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phoneNo?: SortOrder
    email?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    address?: SortOrder
    nrc?: SortOrder
  }

  export type customerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phoneNo?: SortOrder
    email?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    address?: SortOrder
    nrc?: SortOrder
  }

  export type customerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type bookingCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    carNo?: SortOrder
    note?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    durationDay?: SortOrder
    durationType?: SortOrder
    status?: SortOrder
    service?: SortOrder
  }

  export type bookingAvgOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    durationDay?: SortOrder
    durationType?: SortOrder
    status?: SortOrder
  }

  export type bookingMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    carNo?: SortOrder
    note?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    durationDay?: SortOrder
    durationType?: SortOrder
    status?: SortOrder
    service?: SortOrder
  }

  export type bookingMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    carNo?: SortOrder
    note?: SortOrder
    createdDate?: SortOrder
    updatedDate?: SortOrder
    durationDay?: SortOrder
    durationType?: SortOrder
    status?: SortOrder
    service?: SortOrder
  }

  export type bookingSumOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    durationDay?: SortOrder
    durationType?: SortOrder
    status?: SortOrder
  }

  export type booking_statusCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type booking_statusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type booking_statusMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type booking_statusMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type booking_statusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}